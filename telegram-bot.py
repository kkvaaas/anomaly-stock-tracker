import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database import Database
from stock_monitor import StockMonitor
from tinkoff.invest import AsyncClient
from tinkoff.invest.exceptions import RequestError
from stock_chart import StockChartGenerator
from datetime import datetime, timedelta

class NotificationManager:
    def __init__(self, bot: Bot):
        self.bot = bot
    
    async def send_anomaly_alert(self, chat_id: str, ticker: str, change_percent: float, prev_price: float, current_price: float):
        message = (
            f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è!\n"
            f"–ê–∫—Ü–∏—è: {ticker}\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_percent:.2f}%\n"
            f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞: {prev_price:.2f}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}"
        )
        await self.bot.send_message(chat_id=chat_id, text=message)

class Form(StatesGroup):
    waiting_for_token = State()
    waiting_for_stocks = State()
    waiting_for_interval = State()
    waiting_for_threshold = State()
    waiting_for_new_stocks = State()
    waiting_for_new_interval = State()
    waiting_for_new_threshold = State()

bot = Bot(token="8133159439:AAEM9ca5jr9CmLFDe8_Zw5pYm3vZcP38T4k")
dp = Dispatcher()
db = Database()
notification_manager = NotificationManager(bot)
monitor = StockMonitor(notification_manager)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
interval_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="1"), KeyboardButton(text="3")],
        [KeyboardButton(text="5"), KeyboardButton(text="10")]
    ],
    resize_keyboard=True
)

threshold_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="3"), KeyboardButton(text="5")],
        [KeyboardButton(text="7"), KeyboardButton(text="10")]
    ],
    resize_keyboard=True
)

async def check_stock_exists(ticker: str, token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Tinkoff Invest API"""
    try:
        async with AsyncClient(token) as client:
            instruments = await client.instruments.find_instrument(query=ticker)
            for instrument in instruments.instruments:
                if instrument.ticker == ticker and instrument.instrument_type == "share":
                    return True
        return False
    except RequestError:
        return False

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    text = (
        "üìà <b>–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ü–∏–π</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
    )
    await message.answer(text, parse_mode="HTML")
    await state.set_state(Form.waiting_for_token)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/stocks - –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π\n"
        "/interval - –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –∞–∫—Ü–∏–π\n"
        "/threshold - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –∞–∫—Ü–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/history - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ü–∏–π\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ (–∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞)"
    )
    await message.answer(text, parse_mode="HTML")

@dp.message(Form.waiting_for_token)
async def process_token(message: types.Message, state: FSMContext):
    await state.update_data(token=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: SBER,GAZP,VTBR):")
    await state.set_state(Form.waiting_for_stocks)

@dp.message(Form.waiting_for_stocks)
async def process_stocks(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    token = user_data.get("token")
    
    stocks = [s.strip().upper() for s in message.text.split(",")]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏
    invalid_stocks = []
    valid_stocks = []
    
    for ticker in stocks:
        if await check_stock_exists(ticker, token):
            valid_stocks.append(ticker)
        else:
            invalid_stocks.append(ticker)
    
    if invalid_stocks:
        await message.answer(
            f"‚ùå –°–ª–µ–¥—É—é—â–∏–µ —Ç–∏–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∞–∫—Ü–∏—è–º–∏: {', '.join(invalid_stocks)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π:"
        )
        return
    
    if not valid_stocks:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    await state.update_data(stocks=valid_stocks)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):", reply_markup=interval_keyboard)
    await state.set_state(Form.waiting_for_interval)

@dp.message(Form.waiting_for_interval)
async def process_interval(message: types.Message, state: FSMContext):
    if message.text not in ["1", "3", "5", "10"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (1, 3, 5, 10):")
        return
    
    await state.update_data(interval=int(message.text))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (%):", reply_markup=threshold_keyboard)
    await state.set_state(Form.waiting_for_threshold)

@dp.message(Form.waiting_for_threshold)
async def process_threshold(message: types.Message, state: FSMContext):
    if message.text not in ["3", "5", "7", "10"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (3, 5, 7, 10):")
        return
    
    user_data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db.add_user(
        chat_id=str(message.chat.id),
        token=user_data["token"],
        stocks=user_data["stocks"],
        interval_minutes=user_data["interval"],
        threshold_percent=float(message.text)
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    await monitor.start_monitoring_for_user(
        chat_id=str(message.chat.id),
        token=user_data["token"],
        stocks=user_data["stocks"],
        interval_minutes=user_data["interval"],
        threshold_percent=float(message.text)
    )
    
    await message.answer(
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ë–æ—Ç –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.\n"
        f"–ê–∫—Ü–∏–∏: {', '.join(user_data['stocks'])}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {user_data['interval']} –º–∏–Ω\n"
        f"–ü–æ—Ä–æ–≥: {message.text}%",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()

@dp.message(Command("history"))
async def history_command(message: types.Message):
    chat_id = str(message.chat.id)
    user = db.get_user(chat_id)
    
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    for ticker in user["stocks"]:
        prices, times = db.get_price_history_since(ticker, datetime.now() - timedelta(days=7))
        await message.answer(f"–î–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}: {len(prices)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ó–∞—Ç–µ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    chart_generator = StockChartGenerator(user["token"], db)
    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏...")
    
    try:
        await chart_generator.update_user_charts(chat_id)
        charts = await chart_generator.get_all_user_charts(chat_id)
        
        if not charts:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        for ticker, chart in charts.items():
            await message.answer_photo(
                photo=types.BufferedInputFile(chart.getvalue(), filename=f"{ticker}.png"),
                caption=f"–ì—Ä–∞—Ñ–∏–∫ {ticker}"
            )
    except Exception as e:
        print(f"Error in /history: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
    
    except Exception as e:
        print(f"Error in /history: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("stocks"))
async def cmd_stocks(message: types.Message, state: FSMContext):
    user = db.get_user(str(message.chat.id))
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: SBER,GAZP,VTBR):")
    await state.set_state(Form.waiting_for_new_stocks)

@dp.message(Form.waiting_for_new_stocks)
async def process_new_stocks(message: types.Message, state: FSMContext):
    user = db.get_user(str(message.chat.id))
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await state.clear()
        return
    
    stocks = [s.strip().upper() for s in message.text.split(",")]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∞–∫—Ü–∏–∏
    invalid_stocks = []
    valid_stocks = []
    
    for ticker in stocks:
        if await check_stock_exists(ticker, user["token"]):
            valid_stocks.append(ticker)
        else:
            invalid_stocks.append(ticker)
    
    if invalid_stocks:
        await message.answer(
            f"‚ùå –°–ª–µ–¥—É—é—â–∏–µ —Ç–∏–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∞–∫—Ü–∏—è–º–∏: {', '.join(invalid_stocks)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π:"
        )
        return
    
    if not valid_stocks:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.update_stocks(str(message.chat.id), valid_stocks)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
    await monitor.start_monitoring_for_user(
        chat_id=str(message.chat.id),
        token=user["token"],
        stocks=valid_stocks,
        interval_minutes=user["interval_minutes"],
        threshold_percent=user["threshold_percent"]
    )
    
    await message.answer(f"‚úÖ –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω: {', '.join(valid_stocks)}")
    await state.clear()

@dp.message(Command("interval"))
async def cmd_interval(message: types.Message, state: FSMContext):
    user = db.get_user(str(message.chat.id))
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):", reply_markup=interval_keyboard)
    await state.set_state(Form.waiting_for_new_interval)

@dp.message(Form.waiting_for_new_interval)
async def process_new_interval(message: types.Message, state: FSMContext):
    if message.text not in ["1", "3", "5", "10"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (1, 3, 5, 10):")
        return
    
    user = db.get_user(str(message.chat.id))
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await state.clear()
        return
    
    new_interval = int(message.text)
    db.update_interval(str(message.chat.id), new_interval)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
    await monitor.start_monitoring_for_user(
        chat_id=str(message.chat.id),
        token=user["token"],
        stocks=user["stocks"],
        interval_minutes=new_interval,
        threshold_percent=user["threshold_percent"]
    )
    
    await message.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_interval} –º–∏–Ω—É—Ç", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

@dp.message(Command("threshold"))
async def cmd_threshold(message: types.Message, state: FSMContext):
    user = db.get_user(str(message.chat.id))
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (%):", reply_markup=threshold_keyboard)
    await state.set_state(Form.waiting_for_new_threshold)

@dp.message(Form.waiting_for_new_threshold)
async def process_new_threshold(message: types.Message, state: FSMContext):
    if message.text not in ["3", "5", "7", "10"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (3, 5, 7, 10):")
        return
    
    user = db.get_user(str(message.chat.id))
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await state.clear()
        return
    
    new_threshold = float(message.text)
    db.update_threshold(str(message.chat.id), new_threshold)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
    await monitor.start_monitoring_for_user(
        chat_id=str(message.chat.id),
        token=user["token"],
        stocks=user["stocks"],
        interval_minutes=user["interval_minutes"],
        threshold_percent=new_threshold
    )
    
    await message.answer(f"‚úÖ –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω: {new_threshold}%", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

async def on_startup():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        types.BotCommand(command="stocks", description="–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π"),
        types.BotCommand(command="interval", description="–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏"),
        types.BotCommand(command="threshold", description="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        types.BotCommand(command="history", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω")
    ])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    await monitor.start_monitoring_for_all_users()

async def main():
    # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())